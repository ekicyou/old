#########################################################################
# Ｇｈｏｓｔ「．さくら」
# コミュニケート辞書
#########################################################################

#==============================================================================
#
# 「華和梨」イベント処理用簡易スクリプト(Kawari Easy Event Programmed Script)
#  コミュニケーション拡張・スクリプト辞書
#
# ＫＥＥＰＳ製作   ：こやま☆あきら
# OpenKEEPS製作    : ＯｐｅｎＫＥＥＰＳプロジェクトチーム
# OpenKEEPSページ  : http://keeps.sourceforge.jp
#
#==============================================================================
# 動作対象：「華和梨」Phase 7.3.1 及び上位互換版を使用。
#			「何か」（現「伺か」）MATERIA period 480 及び上位互換ソフトを使用。
#==============================================================================

#キャラクター切り替え機能使用についての注意点。
#・対応しているのは、「Comm〜」エントリのみ(変数「Comm.Limit」は除く)。
#  また、該当エントリが無くても、{FlagMode}無しエントリは呼ばれない。
#  例：「Another.Comm.Etc.Call」がなくても、「Comm.Etc.Call」は呼ばれない)
#・「${Select.Comm}」「${sentenceC}」エントリに「{FlagMode}」はつけない様に。
#  各エントリ内で切り替え処理をしている)
#・「${sentenceC}」で呼ぶのは「sentence」「{FlagMode}.sentence」。こちらは、
#  {FlagMode}」付きエントリが無ければ、「sentence」を呼ぶ。

#Comm.Limit : ゴースト間のコミュニケートする最大回数(無限ループ防止)。
Comm.Limit : 5


#コミュニケート制御変数説明====================================================

#system.communicate
#  ゴースト名を書き込むと、そのゴーストにCOMMUNICATEで話し掛ける。
#  "stop"を書き込むと、COMMUNICATEを打ち切る。
#  １度書き込むと、"stop"するまで有効となるので注意。
#  （ただし「ghost-keeps.txt」等、コミュニケート動作対象となっていない所に
#  独自で処理を加えない限り、特に記述する必要は無い）

#パラメータ変数（状況に応じてシステム側で書き換えられます）--------------------

#system.OtherGhost	 : 稼動中の他のゴーストの名前(複数ある場合あり。)
#system.Sender		 : 話し掛けてきたゴースト名、又はシステム名
#system.Age 		 : ゴースト間のCOMMUNICATEした回数(相手に話すごとに1加算)
#system.Sentence	 : 話し掛けられた内容
#FlagOtherGhost 	 : 他のゴーストの登場や変更時に「1」となる。(ゴースト名は
#					   「OtherGhost」に、「Sakura.Surface」「Kero.Surface」に
#					   も情報が代入される)
#OtherGhost 		 : 話しかけてきたゴーストの名前
#Sakura.Surface 	 : 話しかけてきたゴーストのサーフェス番号
#Kero.Surface		 : 話しかけてきたゴーストのKero側のサーフェス番号

#==============================================================================


#コマンド・エントリ説明========================================================
#${Select.Comm} : 他のゴーストに話しかける。(複数いる場合はランダム)
#${sentenceC} : 自発トーク(${sentence})。１／５の確立で他ゴーストにも送る。
#==============================================================================

#応答コミュニケート説明========================================================

#書式 : Comm.{Word1}(.{Word2})
# Word1 : 話しかけられたゴースト名(アプリケーション)、又はユーザー(「user」)
#		  (該当ゴーストがない時は「Comm.user」が呼ばれる)
#		  ゴースト名(アプリケーション)は、最初のスペースまでで、記号は削除、
#		  アルファベットは半角小文字に統一される。
# Word2 : Call = 話し掛ける時(該当ゴーストがない時は「Comm.Etc.Call」が呼ばれる)
#　 			 (ゴーストそのものがいない場合、「Comm.NoExist.Call」が呼ばれる)
#		  Unknown = 応答する語句がない時の反応。
#　　　　　　　　　　これを記述しなければ、この拡張辞書で応答する語句がない場合、
#　　　　　　　　　　マッチエントリ(華和梨基本マニュアル 4.7 参照)へ処理が続く。

# データの書き方："(語句1),(語句2),…,会話文"
#　反応は、該当語句が多い方が優先される。(該当語句が同じ場合は、最初にエントリ
#  されている方)
#  また、会話文に「*」を入れておくと、その会話文は相手ゴーストに送られない。

#==============================================================================

#サンプル：ゴースト「花ちゃん」反応============================================

Comm.花ちゃん : "すべすべ,\0${Sakura.Surface}：${Kero.Surface}\n\s[0]ほかほかご飯。\e"
Comm.花ちゃん : "んへいた,\0\s[4]‥‥\w8へんたい？\e"
Comm.花ちゃん : "何,わからないの,\0\s[4]‥‥\w8会話を止めるね。\e*"
Comm.花ちゃん.Unknown : ${Comm.user.Unknown}

Comm.花ちゃん.Call : \0\s[5]こんにちは、花ちゃん。\e
Comm.花ちゃん.Call : \0\s[3]なまずさん、食べちゃ駄目かな‥‥。\1\s[10]こらこら。\e

#==============================================================================


#サンプル：ゴースト「陽子」反応================================================
#注：「"あかんな。…」に対して、実際には応答しません。(送信されていない)
#　　こちらから話しかけると「Comm.陽子.Unknown」反応を見る事が出来ます。

Comm.陽子 : "あかんな。,\0\s[0]‥‥何が開かないんですか？\1\s[10]‥‥ベタすぎて、ツッコむ気にもならん。\e"
Comm.陽子.Unknown : $(if $([ ${Sakura.Surface} -eq 200 ]) "\0\s[4]今日の陽子さん、なにか怖いですね‥‥‥。\e*" "\0\s[4]‥‥\w8会話を止めるね。\e*")

Comm.陽子.Call : "\0\s[5]陽子さん、こんにちは。\e"

#==============================================================================

Comm.ヒルデ : \0\s[5]こんにちは! ヒルデ！ \e
Comm.ヒルデ.Call : \0\s[5]こんにちは〜! \e

Comm.ねここ : \0\s[5]おネーちゃんだぞ！ \e
Comm.ねここ.Call : \0\n\s[4]な〜に〜？\e
Comm.せりこ : \0\n\s[3]なんか、ネタない？ \e
Comm.せりこ.Call : \0\n\s[5]やほ〜! \e
Comm.双葉 : \0\n\s[6]‥‥。 \e
Comm.双葉.Call : \0\n\s[8]や。 \e
Comm.まゆら : \0\n\s[5]ゲームしてる？まゆら！ \e
Comm.まゆら.Call : \0\n\s[5]こんばんは〜! \e
Comm.なる : \0\n\s[3]あんまり、ゆうか食べちゃだめだよ。\e
Comm.なる.Call : \0\n\s[5]こんにちわ〜! \e

#その他のゴーストへの呼びかけ（汎用）==========================================

Comm.Etc.Call : \0\s[5]こんにちは、${system.OtherGhost}。\e
Comm.Etc : \0\s[5]こんにちわ。\e

Comm.NoExist.Call : \0\s[8]‥‥‥話しかける相手がいません。\e

#==============================================================================


#その他のゴースト及びユーザー反応（汎用）======================================

Comm.user : "おはよう,\0\s[5]おはようございま〜す。\e"
Comm.user : "おはよう,ございます,\0\s[1]どうしたんですか、あらたまって？\e"
Comm.user : "こんばんわ,\0\s[5]こんばんわ〜。\e"

Comm.user.Unknown : \0\n\s[4]わかんない…。 \e
Comm.user.Unknown : \0\n\s[8]はい？\e

#==============================================================================


#おまけ：「Yunasoft Sexyfont」での「リクエスト設定」→「お話する」反応=========
#「内容」を「%IAMPはどうよ？」とする。
Comm.yunasoft : "ymo,\1\s[10]‥‥イモ？\e"
#==============================================================================


#おまけ２ : 「Ghost-KEEPS.txt」へのコミュニケーション組み込み例================
#「Ghost-KEEPS.txt」にある、以下のエントリを必要に応じて挿し変える。
#誤動作を防ぐ為「#」でコメント化しています。

#Mainmenu : ${countzero}$(set system.communicate "stop")${Mainmenu1}\n\n\q0[Manzai][偽ＡＩトーク]\q1[Timing][お喋り頻度]\q2[Cancel][取り消し]\q3[Talk][COMMUNICATEボックス]\q4[Comm][他のゴーストに話しかける]\q5[Change][別人格へ切り替え]\e

#Select.Manzai : ${countzero}${sentenceC}\e
#TalkTimeEvent : ${sentenceC}\e

#==============================================================================
